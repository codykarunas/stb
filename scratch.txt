1. Admin User Login Page for administrate /admin
2. Program the Order and OrderItem functionality

============================================================
CONCERNS:

1. Build a P.O.S. System for a Restaurant with self-service. This system will
simulate a restaurant ordering system in that it will 

  [DONE] 1) place an order containing several food items, 
  [DONE] 2) send messages to different terminals telling workers what to make, 
  [DONE] 3) allow workers to indicate that the food is done, 
  [DONE] 4) checkoff that the order is assembled and delivered and 
  [DONE] 5) allow the customer to serve themselves from a kiosk or app

FEATURES:
  (?) 1) Payment system with Stripe
  (?) 2) LineItem pending/completed
  (?) 3) Email receipt to current user's E-mail address
  (?) 4) Employee Orders
  (?) 5) LineItem options: [small, medium, large], [hot, cold]
============================================================

Nested Routes
 
  3) allow workers to indicate that the food is done, 
    FoodStatus
      Not Done
      Done

  4) checkoff that the order is assembled and delivered and 
    OrderStatus
      Assembeled and Delivered

LineItem
  id: 6,
  item_id: 1,
  cart_id: 3,
  created_at: Sat, 02 Jun 2018 05:01:07 UTC +00:00,
  updated_at: Sat, 02 Jun 2018 05:01:07 UTC +00:00,
  quantity: 1,
  user_id: 1,
  price: 0.312e1,
  name: "Iced Coffee",
  item_type: "Drink"
  

FoodStatus
  belongs_to :line_items
  status:string "Done" || "Not Done"

OrderStatus
  belongs_to :orders
  status:string "Not Delivered" || "Delivered"

**** Need to find a way to delete the cart after its been added to the order
  Find out when the order is being saved.
  Right after the order is saved, delete the cart!

*** Need to figure out why action mailer isnt working


Useful Commands:
pg_ctl -D /usr/local/var/postgres start/stop

# ACTIVEADMIN
https://activeadmin.info/documentation.html
Register model to activeadmin
$> rails generate active_admin:resource

One-to-one
One-to-many
Many-to-many
Polymorphic one-to-many<Paste>

#TODOS

Generate an admin user.
Generate views for the admin user.

User
  email
  password
  first_name
  last_name
  role

LineItem
  id
  quantity

  cart_id FK

  created_at
  updated_at

Order
  id
  subtotal
  total
  tax
  status

  user_id FK
  cart_id FK

  created_at
  updated_at

Item
  id
  name
  item_type
  price
  description
  image
  active
  created_at

Cart
  id
  created_at
  updated_at
  update_at

REF: https://stackoverflow.com/questions/21783819/processing-credit-card-payments-in-rails

  It's more than not recommended, If you store or directly handle card holder
  data yourself you must go through the lengthy and expensive process of
  becoming PCI compliant, failure to do so can result in you being held liable
  for penalties and losses by the card schemes in the event of a breach of your
    system.

A service like Stripe helps you largely avoid this burden.

... but how to make a refund if I don't have any credit card info available in
my database?

Using Stripe's API or Dashboard all you need to refund is the Order Id
generated by their system when the charge was initially made. You should never
need to see, or even be able to see the actual card number.


(User Orders)
LineItem, Cart, Order

#------------------------------------------
(Employee Orders)
EmployeeLineItem, EmployeeCart, EmployeeOrder

EmployeeCart
  id: nil,
  subtotal: nil,
  tax: nil,
  total: nil,

  (FK) employee_line_item_id: nil

EmployeeOrder Data types
Table #1
  id: nil,
  subtotal: nil,
  tax: nil,
  total: nil,
  status: nil, (EX: pending etc)

  created_at: nil,
  updated_at: nil,

  (FK) employee_cart_id: nil,
  (FK) employee_line_item_id: nil,
  (FK) employee_id: nil


-------------------------------------------------------------
Orders
attributes:
number: id
item_total:
adjustment_total:
total: the result of the sum of the item_total and adjustment_total
payment_total
shipment_total
additional_tax_total: sum of all shipments' and line items' additional_tax
included_tax_total: the sum of all shipments' and line items' included tax
state:
email: The email address for the user who placed this order. Stored in case this order is for a guest user.
user_id: The ID for the corresponding user record for this order. Stored only if the order is placed by a signed-in user.
completed_at: The timestamp of when the order was completed.
payment_state: The current payment state of the order. For possible states, please see the Payments guide.
item_count: The total value of line itemsâ€™ quantity.
